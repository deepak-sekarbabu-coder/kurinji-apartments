rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Orders collection - users can only read/write their own orders
    match /orders/{orderId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    // Payments collection - users can only read/write their own payments
    match /payments/{paymentId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.fromUserId;
    }
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Notifications collection - users can access their apartment's notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.fromUserId || 
         resource.data.toApartmentId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.apartment ||
         (resource.data.toApartmentId is list && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.apartment in resource.data.toApartmentId));
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.fromUserId || 
         resource.data.toApartmentId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.apartment ||
         (resource.data.toApartmentId is list && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.apartment in resource.data.toApartmentId));
      allow create: if request.auth != null && 
        (request.auth.uid == request.resource.data.fromUserId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
  }
}
